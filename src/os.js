const os = require('os'); //Так мы можем взаимодействовать с операционной системой
const cluster = require('cluster');
function consoleLog(){
	const osPlatform = os.platform(); //Позволяет получить текущую операцинную систему пользователя
	console.log(osPlatform); //Аналогична process.platform()
	console.log(os.arch()); //Возращает битность системы (архитектура процессора)
	console.log(os.cpus()); //Возращает массив, где каждый элемент массива - описание ядра процессора
	console.log(os.cpus().length); //Возращает количество ядер процессора
}

/*
	Информация о том, сколько ядер у пользователя очень важна. Т.к. в зависимости от
	количества ядер мы можем запускать разное количество процессов на нашем nodeJs
	приложении.

	Мы можем циклом пробежаться по каждому ядру и получить его, при этом лучше оставить
	1-2 ядра под нужны операционной системы
*/
if(cluster.isPrimary){
	for(let i = 0; i < os.cpus().length - 2; i++) {
		cluster.fork()
	}
	cluster.on('exit', (worker, code, signal) => {
		console.log(`Воркер с id=${process.worker.pid} умер`)
		cluster.fork();
	})
} else {
	console.log(`Воркер с id=${process.pid} запущен`);
	setInterval(() => {
		console.log(`Воркер с id=${process.pid} все ещё работает`)
	}, 5000)
}

/*
	Что мы тут сделали? Грубо говоря, мы создали 6 процессов (length - 2), которые 
	отображаются в консоли по определенному pid, также, мы предусмотрели кейс,
	когда у нас может умереть 1 из процессов, после чего будет сразу создан новый

	Вообще, эта тема будет немного дальше, пока что лишь поверхностно консулись её

*/